trigger:
  - none

pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerImageName: 'saishadow5473/my-angular-app'  # Replace with your Docker Hub username and desired image name
  dockerRegistryServiceConnection: 'MyDockerHub'  # Replace with your Docker registry service connection name
  awsVmIp: '13.127.28.78'  # Replace with your AWS VM IP
  awsVmUser: 'ubuntu'  # Replace with your AWS VM username

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'  # Adjust based on your Node.js version
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build
      displayName: 'Install dependencies and build Angular app'

    - task: Docker@2
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(dockerImageName)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          latest
      displayName: 'Build and Push Docker Image'

- stage: Deploy
  dependsOn: Build
  jobs:
  - job: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: SSH@0
      inputs:
        sshEndpoint: 'newconnection'  # Replace with your Azure DevOps SSH service connection endpoint name
        runOptions: 'inline'
        # scriptType: 'bash'
        # scriptLocation: 'inline'
        inline: |
          # Stop and remove the container if it exists
          docker stop my-container || true  # Ignore errors if container is not found
          docker rm my-container || true    # Ignore errors if container is not found

          # Run your docker run command to start the container
          docker run -d --name my-container -p 80:80 $(dockerImageName):latest

